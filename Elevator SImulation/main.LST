C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "reg51.h"    //此文件中定义了单片机的一些特殊功能寄存器
   2          #include "lcd.h"
   3          
   4          typedef unsigned int u16;         //对数据类型进行声明定义
   5          typedef unsigned char u8;
   6                                                  
   7          sbit A1=P1^0; //定义步进电机连接端口
   8          sbit B1=P1^1;
   9          sbit C1=P1^2;
  10          sbit D1=P1^3;
  11          
  12          sbit LEDO=P2^0;
  13          sbit LEDC=P2^1;
  14          sbit LEDU=P2^6;
  15          sbit LEDD=P2^7;
  16          
  17          #define Coil_A1 {A1=1;B1=0;C1=0;D1=0;}//A相通电，其他相断电
  18          #define Coil_B1 {A1=0;B1=1;C1=0;D1=0;}//B相通电，其他相断电
  19          #define Coil_C1 {A1=0;B1=0;C1=1;D1=0;}//C相通电，其他相断电
  20          #define Coil_D1 {A1=0;B1=0;C1=0;D1=1;}//D相通电，其他相断电
  21          #define Coil_AB1 {A1=1;B1=1;C1=0;D1=0;}//AB相通电，其他相断电
  22          #define Coil_BC1 {A1=0;B1=1;C1=1;D1=0;}//BC相通电，其他相断电
  23          #define Coil_CD1 {A1=0;B1=0;C1=1;D1=1;}//CD相通电，其他相断电
  24          #define Coil_DA1 {A1=1;B1=0;C1=0;D1=1;}//D相通电，其他相断电
  25          #define Coil_OFF {A1=0;B1=0;C1=0;D1=0;}//全部断电
  26          
  27          #define DataPort P0 //定义段数据端口 程序中遇到DataPort 则用P0 替换
  28          #define SegPort  P3 //定义位数据端口
  29          
  30          #define GPIO_DIG P0
  31          #define GPIO_KEY P1
  32          
  33          //sbit LSA=P2^2;
  34          //sbit LSB=P2^3;
  35          //sbit LSC=P2^4;
  36          //sbit LEDC=P2^4;//关门指示灯
  37          //sbit LEDO=P2^5;//开门指示灯
  38          //sbit LEDU=P1^6;//上行指示灯
  39          //sbit LEDD=P1^7;//下行指示灯                                   
  40          
  41          u8 code DuanMa[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,
  42                                                           0x77,0x7c,0x39,0x5e,0x79,0x71};// 显示段码值0~F
  43          u8 code WeiMa[]={0,1,2,3,4,5,6,7};
  44          
  45          u8 KeyValue;    //用来存放读取到的键值
  46          u8 N[5] = {0,0,0,0,0};                  //内部按键
  47          u8 F[5] = {0,0,0,0,0};                  //楼层
  48          u8 out_up[5] = {0,0,0,0,0};  //外部上升
  49          u8 out_down[5] = {0,0,0,0,0};
  50          u8 door[3]={0,0,0};
  51          u8 state=0;
  52          u8 Speed=2;
  53          u8 floor=1;
  54          u8 jump=0;
  55          u8 j=0;
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 2   

  56          u8 i=0;
  57          
  58          
  59          u8 TempData[8]; //存储显示值的全局变量
  60          u8 Judge(u8 s[]);
  61          u8 Maxline(u8 s[]);
  62          u8 Minline(u8 s[]);
  63          u8 Status (u8 s);
  64          void atfloar(void);
  65          //void Ctrl_door(u8 s);
  66          //void Open_door(void);
  67          //void Close_door(void);
  68          void WaitDelayMs(u8 t);
  69          void Clear(u8 floor);
  70          void DelayMs1(u16 t); 
  71          void Machine (u8 s);
  72          void KeyDown(void);
  73          void KeyTrans(void);
  74          void Latern(void);
  75          void state_LED();
  76          void Display(u8 FirstBit,u8 Num);
  77          void Init_Timer0(void);
  78          
  79          void main()
  80          {       
  81   1              while(1)
  82   1              {
  83   2                       Init_Timer0();
  84   2                       Coil_OFF
  85   2                       TempData[6]=DuanMa[floor];
  86   2                       if(j==1)
  87   2                       {
  88   3                              LEDO=0;
  89   3                              DelayMs1(3000);
  90   3                              LEDO=1;
  91   3                              LEDC=0;
  92   3                              DelayMs1(1000);
  93   3                              LEDC=1;
  94   3                              j=0;
  95   3                              i=0;
  96   3                       }
  97   2                       
  98   2                       state=Status(state);
  99   2                       state_LED();            
 100   2                       Machine(state);
 101   2                              
 102   2              }               
 103   1      }
 104          
 105          
 106          /**************************************************************************************
 107          *                             电梯键盘设置                                                                                                *
 108          按键安排：S1―S8为各层外部按键
 109                            S9-S13为内部按键
 110                            S14-S15为开关门控制                                                                                                                                                             
 111          ***************************************************************************************/
 112          /*u8 code smgduan[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
 113                                                  0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};//显示0~F的值*/
 114          /*******************************************************************************
 115          * 函 数 名         : delay
 116          * 函数功能                 : 延时函数，i=1时，大约延时10us
 117          *******************************************************************************/
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 3   

 118          void delay(u16 i)
 119          {
 120   1              while(i--);     
 121   1      }
 122          /*******************************************************************************
 123          * 函 数 名         : KeyDown
 124          * 函数功能                 : 检测有按键按下并读取键值
 125          * 输    入         : 无
 126          * 输    出         : 无
 127          *******************************************************************************/
 128          void KeyDown(void)
 129          {       
 130   1              char a=0;
 131   1              KeyValue = 15;
 132   1      //      u8 i[5]={0};
 133   1      //      u8 j[5]={0};
 134   1              GPIO_KEY=0x0f;
 135   1              if(GPIO_KEY!=0x0f)//读取按键是否按下
 136   1              {
 137   2                      delay(1000);//延时10ms进行消抖
 138   2                      if(GPIO_KEY!=0x0f)//再次检测键盘是否按下
 139   2                      {       
 140   3                              //测试列
 141   3                              GPIO_KEY=0X0f;
 142   3                              switch(GPIO_KEY)
 143   3                              {
 144   4                                      case(0X07): KeyValue=0;break;
 145   4                                      case(0X0b):     KeyValue=1;break;
 146   4                                      case(0X0d): KeyValue=2;break;
 147   4                                      case(0X0e):     KeyValue=3;break;
 148   4                              }
 149   3                              //测试行
 150   3                              GPIO_KEY=0Xf0;
 151   3                              switch(GPIO_KEY)
 152   3                              {
 153   4                                      case(0X70):     KeyValue=KeyValue;break;
 154   4                                      case(0Xb0):     KeyValue=KeyValue+4;break;
 155   4                                      case(0Xd0): KeyValue=KeyValue+8;break;
 156   4                                      case(0Xe0):     KeyValue=KeyValue+12;break;
 157   4                              }
 158   3                              while((a<50)&&(GPIO_KEY!=0xf0))  //检测按键松手检测
 159   3                              {
 160   4                                      delay(1000);
 161   4                                      a++;
 162   4                              }
 163   3                      }
 164   2              }
 165   1      }
 166          /*******************************************************************************
 167          * 函 数 名         : KeyTrans
 168          * 函数功能                 : 将键值转化为相应操作
 169          * 注    释                 ：N为内部输入，n为外部输入,i下在当前楼层外部上被按下时置1，j下在当前楼层外部下被按下时置1            
 170          * 输    入         : 无
 171          * 输    出         : 无
 172          *******************************************************************************/
 173          void KeyTrans(void)
 174          {
 175   1              switch(KeyValue)
 176   1              {
 177   2                      case (0):  {F[0]=1;out_up[0]=1;} break;
 178   2                      case (1):  {F[1]=1;out_up[1]=1;} break;
 179   2                      case (2):  {F[1]=1;out_down[1]=1;} break;
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 4   

 180   2                      case (3):  {F[2]=1;out_up[2]=1;} break;
 181   2                      case (4):  {F[2]=1;out_down[2]=1;} break;
 182   2                      case (5):  {F[3]=1;out_up[3]=1;} break;
 183   2                      case (6):  {F[3]=1;out_down[3]=1;} break;
 184   2                      case (7):  {F[4]=1;out_down[4]=1;} break;
 185   2                      case (8):               N[0] = 1;               break;
 186   2                      case (9):               N[1] = 1;               break;
 187   2                      case (10):      N[2] = 1;               break;
 188   2                      case (11):      N[3] = 1;               break;
 189   2                      case (12):      N[4] = 1;               break;
 190   2                      default :               break;
 191   2              }
 192   1      }
 193          /*******************************************************************************
 194          * 函 数 名         : Status
 195          * 函数功能                 : 判断电梯目前运行情况，上行还是下行
 196          * 注    释                 ：s=1表示上行，s=2表示下行
 197          * 输    入         : 无
 198          * 输    出         : 无
 199          *******************************************************************************/
 200          u8 Status (u8 s)
 201          {
 202   1              if(s==0)
 203   1              {       
 204   2                      if (Judge(N))
 205   2                      {
 206   3                              if(Maxline(N)+1 > floor)
 207   3                                      s=1;
 208   3                              else if(Maxline(N)+1 == floor)
 209   3                                      {
 210   4                                              s=0;
 211   4                                              N[floor-1]=0;
 212   4                                              j=1;
 213   4                                      }
 214   3                              else 
 215   3                                      s=2;
 216   3                      }
 217   2                      else
 218   2                      {
 219   3                              if(Judge(F))
 220   3                              {                                                                                
 221   4                                      if((Maxline(F)+1) > floor)
 222   4                                              s=1;
 223   4                                      else if((Maxline(F)+1) == floor)
 224   4                                              {
 225   5                                                      s=0;
 226   5                                                      out_up[floor-1]=0;
 227   5                                                      out_down[floor-1]=0;
 228   5                                                      F[floor-1]=0;
 229   5                                                      j=1;
 230   5                                              }
 231   4                                      else
 232   4                                              s=2;
 233   4                              }
 234   3                              else 
 235   3                                      s=0;
 236   3                      }               
 237   2              }
 238   1              else if(s==2)
 239   1              {
 240   2                      if (Judge(N))
 241   2                      {
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 5   

 242   3                              if(Minline(N)+1 < floor)
 243   3                                      s=s;
 244   3                              else 
 245   3                                      s=1;
 246   3                      }
 247   2                      else
 248   2                      {
 249   3                              if (Judge(out_down))
 250   3                              {
 251   4                                      if(Minline(out_down)+1 < floor)
 252   4                                              s=s;
 253   4                                      else
 254   4                                              s=1;
 255   4                              }
 256   3                              else if(Judge(out_up))
 257   3                                      s=1;
 258   3                              else 
 259   3                                      s=0;
 260   3                      }
 261   2              }       
 262   1              else if(s==1)
 263   1              {
 264   2                      if (Judge(N))
 265   2                      {
 266   3                              if(Maxline(N)+1 > floor)
 267   3                                      s=1;
 268   3                              else 
 269   3                                      s=2;
 270   3                      }
 271   2                      else
 272   2                      {
 273   3                              if (Judge(F))
 274   3                              {
 275   4                                      if(Maxline(F)+1 > floor)
 276   4                                              s=1;
 277   4                                      else
 278   4                                              s=2;
 279   4                              }
 280   3                              else if(Judge(out_down))
 281   3                                      s=2;
 282   3                              else 
 283   3                                      s=0;    
 284   3                      }                       
 285   2              }
 286   1              return s;
 287   1      }
 288          /*******************************************************************************
 289          * 函 数 名         : Judge
 290          * 函数功能                 : 判断一个数组是否全为零
 291          * 注    释                 ：若全为0返回0，否则返回1
 292          * 输    入         : 一个数组
 293          * 输    出         : 一个实数1或0
 294          *******************************************************************************/
 295          u8 Judge(u8 s[])
 296          {
 297   1              u8 i = 0;
 298   1              while (i<5)                
 299   1              {
 300   2                      if(s[i] != 0)
 301   2                              return 1;
 302   2                      i++;
 303   2              }
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 6   

 304   1              return 0;
 305   1      }
 306          /*******************************************************************************
 307          * 函 数 名         : Maxline
 308          * 函数功能                 : 找出数组中最大的项
 309          * 注    释                 ：无
 310          * 输    入         : 一个数组
 311          * 输    出         : 一个整数，最大的项
 312          *******************************************************************************/
 313          u8 Maxline(u8 a[])
 314          {
 315   1              u8 max = 0;
 316   1              u8 i = 0;
 317   1              while (i<5)
 318   1              {
 319   2                      if(a[i]!=0)
 320   2                              max = i;
 321   2                      i++;            
 322   2              }
 323   1              return max;
 324   1      }
 325          /*******************************************************************************
 326          * 函 数 名         : Minline
 327          * 函数功能                 : 找出数组中最小的项
 328          * 注    释                 ：无
 329          * 输    入         : 一个数组
 330          * 输    出         : 一个整数，最小的项
 331          *******************************************************************************/
 332          u8 Minline(u8 b[])
 333          {
 334   1              u8 i = 0;
 335   1              while (i<5)
 336   1              {
 337   2                      if(b[i]!=0)
 338   2                              return i;
 339   2                      i++;            
 340   2              }
 341   1              return 0;
 342   1      }
 343          /*------------------------------------------------
 344           uS延时函数，含有输入参数 unsigned char t，无返回值
 345           unsigned char 是定义无符号字符变量，其值的范围是
 346           0~255 这里使用晶振12M，精确延时请使用汇编,大致延时
 347           长度如下 T=tx2+5 uS 
 348          ------------------------------------------------*/
 349          void DelayUs2x(unsigned char t)
 350          {   
 351   1       while(--t);
 352   1      }
 353          /*------------------------------------------------
 354           mS延时函数，含有输入参数 unsigned char t，无返回值
 355           unsigned char 是定义无符号字符变量，其值的范围是
 356           0~255 这里使用晶振12M，精确延时请使用汇编
 357          ------------------------------------------------*/
 358          void DelayMs(unsigned char t)
 359          {
 360   1           
 361   1       while(t--)
 362   1       {
 363   2           //大致延时1mS
 364   2           DelayUs2x(245);
 365   2               DelayUs2x(245);
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 7   

 366   2       }
 367   1      }
 368          void DelayMs1(unsigned int t)
 369          {
 370   1           
 371   1       while(t--)
 372   1       {
 373   2           //大致延时1mS
 374   2           DelayUs2x(245);
 375   2               DelayUs2x(245);
 376   2       }
 377   1      }
 378          /*******************************************************************************
 379          * 函 数 名         : Run_up
 380          * 函数功能                 : 电梯上行
 381          * 注    释                 ：无
 382          * 输    入         : 无
 383          * 输    出         : 电机正向转
 384          *******************************************************************************/
 385          void Run_up(void)
 386          {
 387   1              unsigned int r=1;
 388   1              unsigned int i=512;//旋转一周时间
 389   1              Coil_OFF
 390   1              while(i--)  //正向
 391   1              {         
 392   2              Coil_A1                //遇到Coil_A1  用{A1=1;B1=0;C1=0;D1=0;}代替
 393   2              DelayMs(Speed);         //改变这个参数可以调整电机转速 ,数字越小，转速越大,力矩越小
 394   2              Coil_B1
 395   2              DelayMs(Speed);
 396   2              Coil_C1
 397   2              DelayMs(Speed);
 398   2              Coil_D1
 399   2              DelayMs(Speed); 
 400   2              } 
 401   1              Clear(floor);
 402   1              floor++;
 403   1       }
 404           /*******************************************************************************
 405          * 函 数 名         : Run_down
 406          * 函数功能                 : 电梯下行
 407          * 注    释                 ：无
 408          * 输    入         : 无
 409          * 输    出         : 电机反向转
 410          *******************************************************************************/
 411          void Run_down(void)
 412          {
 413   1              unsigned int r=0x01;
 414   1              unsigned int i=512*r;//旋转一周时间
 415   1              Coil_OFF
 416   1              while(i--)  //反向
 417   1              {         
 418   2              Coil_D1                //遇到Coil_A1  用{A1=1;B1=0;C1=0;D1=0;}代替
 419   2              DelayMs(Speed);         //改变这个参数可以调整电机转速 ,数字越小，转速越大,力矩越小
 420   2              Coil_C1
 421   2              DelayMs(Speed);
 422   2              Coil_B1
 423   2              DelayMs(Speed);
 424   2              Coil_A1
 425   2              DelayMs(Speed); 
 426   2              }
 427   1              Clear(floor-2);
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 8   

 428   1              floor--;
 429   1       }
 430           /*******************************************************************************
 431          * 函 数 名         : Machine
 432          * 函数功能                 : 控制电梯
 433          * 注    释                 ：无
 434          * 输    入         : 无
 435          * 输    出         : 无
 436          *******************************************************************************/
 437          void Machine(u8 c)
 438          {
 439   1              unsigned int r=0x01;
 440   1              unsigned int i=512*r;//旋转一周时间
 441   1              if (c==0)
 442   1              {
 443   2                      Coil_OFF
 444   2              }
 445   1              if (c==1)
 446   1                      Run_up();
 447   1              Coil_OFF
 448   1              i=512*r;
 449   1              if (c==2)
 450   1              {
 451   2                      Run_down();
 452   2              }
 453   1       }
 454          
 455          /*------------------------------------------------
 456                        定时器初始化子程序
 457          ------------------------------------------------*/
 458          void Init_Timer0(void)
 459          {
 460   1       TMOD |= 0x01;    //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响                 
 461   1       //TH0=0x00;          //给定初值
 462   1       //TL0=0x00;
 463   1       EA=1;            //总中断打开
 464   1       ET0=1;           //定时器中断打开
 465   1       TR0=1;           //定时器开关打开
 466   1      }
 467          /*------------------------------------------------
 468                           定时器中断子程序
 469          ------------------------------------------------*/
 470          void Timer0_isr(void) interrupt 1 
 471          {
 472   1       KeyDown();
 473   1       KeyTrans();
 474   1      
 475   1       TH0=(65536-2000)/256;            //重新赋值 2ms
 476   1       TL0=(65536-2000)%256;
 477   1       
 478   1       Display(0,8);       // 调用数码管扫描
 479   1      
 480   1      }
 481          
 482          /*------------------------------------------------
 483           显示函数，用于动态扫描数码管
 484           输入参数 FirstBit 表示需要显示的第一位，如赋值2表示从第三个数码管开始显示
 485           如输入0表示从第一个显示。
 486           Num表示需要显示的位数，如需要显示99两位数值则该值输入2
 487          ------------------------------------------------*/
 488          void Display(unsigned char FirstBit,unsigned char Num)
 489          {
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 9   

 490   1            static unsigned char i=0;
 491   1                
 492   1      
 493   1                 DataPort=0;   //清空数据，防止有交替重影
 494   1      
 495   1      
 496   1             SegPort=WeiMa[i+FirstBit]; //取位码 
 497   1      
 498   1      
 499   1             DataPort=TempData[i]; //取显示数据，段码
 500   1      
 501   1             
 502   1                 i++;
 503   1             if(i==Num)
 504   1                    i=0;
 505   1      }
 506          void Clear(u8 floor)
 507          {       j=0;
 508   1              i=0;
 509   1              if(out_up[floor]&&out_down[floor])
 510   1              {
 511   2                      if(state==1)
 512   2                              {
 513   3                                      out_up[floor]=0;
 514   3                                      j=1;
 515   3                                      i=1;
 516   3                              }
 517   2                      if(state==2)
 518   2                      {
 519   3                              out_down[floor]=0;
 520   3                              j=1;
 521   3                              i=1;
 522   3                      }
 523   2              }
 524   1              else if(out_up[floor])
 525   1              {
 526   2                      if(state==1)
 527   2                              {
 528   3                                      out_up[floor]=0;
 529   3                                      j=1;
 530   3                                      i=1;
 531   3                              }
 532   2                      if(state==2)
 533   2                      {
 534   3                              if(Minline(N)<floor)
 535   3                                      ;
 536   3                              else 
 537   3                              {
 538   4                                      out_up[floor]=0;
 539   4                                      j=1;
 540   4                                      i=1;
 541   4                              }
 542   3                      }
 543   2              }
 544   1              else if(out_down[floor])
 545   1              {
 546   2                 if(state==2)
 547   2                 {
 548   3                              out_down[floor]=0;
 549   3                              j=1;
 550   3                              i=1;
 551   3                      }
C51 COMPILER V9.01   MAIN                                                                  05/26/2017 13:15:03 PAGE 10  

 552   2                      if(state==1)
 553   2                      {
 554   3                              if(Maxline(N)>floor)
 555   3                                      ;
 556   3                              else if(Maxline(out_down)>floor)
 557   3                                      ;
 558   3                              else 
 559   3                              {
 560   4                                      out_down[floor]=0;
 561   4                                      j=1;
 562   4                                      i=1;
 563   4                                      
 564   4                              }
 565   3                      }
 566   2              }
 567   1              if(N[floor]==1)
 568   1              {
 569   2                      i=1;
 570   2                      j=1;
 571   2              }
 572   1              N[floor]=0;
 573   1              F[floor]=0;
 574   1      } 
 575          
 576          
 577           void state_LED()
 578           {
 579   1              if (i==0&&state==1)
 580   1              {
 581   2                      LEDU=0;
 582   2                      LEDD=1;
 583   2              }
 584   1              if (i==0&&state==2)
 585   1              {
 586   2                      LEDU=1;
 587   2                      LEDD=0;
 588   2              }
 589   1              if(i==1)
 590   1              {
 591   2                      LEDU=1;
 592   2                      LEDD=1;
 593   2              }
 594   1                      
 595   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1424    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
